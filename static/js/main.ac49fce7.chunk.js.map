{"version":3,"sources":["context/TaskListContext.js","components/Task.js","components/TaskList.js","components/taskForm.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["TaskListContext","createContext","TaskListContextProvider","props","initialState","JSON","parse","localStorage","getItem","useState","tasks","setTasks","edit","setEdit","useEffect","setItem","stringify","Provider","value","addTask","title","id","uuidv4","removeTask","filter","task","clearList","findItem","item","find","editTask","newTasks","map","children","Task","useContext","className","onClick","TaskList","length","key","TaskForm","setTitle","onSubmit","e","preventDefault","onChange","target","console","log","type","placeholder","required","Header","App","style","borderRadius","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ac49fce7.chunk.js","sourcesContent":["import React, {createContext, useState, useEffect} from 'react'\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport const TaskListContext = createContext()\r\n\r\nconst TaskListContextProvider = (props) => {\r\n    const initialState = JSON.parse(localStorage.getItem('tasks')) || []\r\n\r\n    const [tasks, setTasks] = useState(initialState)\r\n\r\n    const [edit, setEdit] = useState(null)\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('tasks', JSON.stringify(tasks))\r\n    }, [tasks])\r\n\r\n    const addTask = (title) => {\r\n        setTasks([...tasks, {title, id: uuidv4() }])\r\n    }\r\n\r\n    const removeTask = (id) => {\r\n        setTasks(tasks.filter(task => task.id !== id))\r\n    }\r\n\r\n    const clearList = () => {\r\n        setTasks([])\r\n    }\r\n\r\n    const findItem = id => {\r\n        const item = tasks.find(task => task.id === id)\r\n\r\n        setEdit(item)\r\n    }\r\n\r\n    const editTask = (title, id) => {\r\n        const newTasks = tasks.map(task => (task.id ===\r\n            id ? {title, id} : task)\r\n        )\r\n\r\n        setTasks(newTasks)\r\n        setEdit(null)\r\n    }\r\n\r\n\r\n    return (\r\n        <TaskListContext.Provider value={{tasks, addTask, removeTask, clearList, findItem, editTask, edit}}>\r\n            {props.children}\r\n        </TaskListContext.Provider>\r\n    )\r\n}\r\n\r\nexport default TaskListContextProvider;\r\n","import React, {useContext} from 'react';\r\nimport {TaskListContext} from \"../context/TaskListContext\";\r\n\r\nconst Task = ({task}) => {\r\n    const {removeTask, findItem} = useContext(TaskListContext)\r\n\r\n\r\n    return (\r\n        <li className='list-group-item d-flex flex-row bg-transparent w-100 p-3'>\r\n            <span className='w-25'>{task.title}</span>\r\n            <div className='d-flex h-50 w-75'>\r\n                <button className='btn btn-warning mr-1 ml-5' onClick={() => findItem(task.id)}>\r\n                    Edit\r\n                </button>\r\n                <button onClick={() => removeTask(task.id)} className='btn btn-danger ml-1'>\r\n                    Remove\r\n                </button>\r\n            </div>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Task;","import React, {useContext} from 'react';\r\nimport {TaskListContext} from \"../context/TaskListContext\";\r\nimport Task from \"./Task\";\r\n\r\nconst TaskList = (props) => {\r\n    const {tasks} = useContext(TaskListContext)\r\n    return (\r\n        <div>\r\n            {\r\n                tasks.length ? (\r\n                    <ul className='list-group'>\r\n                        {tasks.map(task => {\r\n                            return (\r\n                                <Task task={task} key={task.id}/>\r\n                            )\r\n                        })}\r\n                    </ul>\r\n                ) : (\r\n                    <h4 className='text-danger text-center'>I am sorry there is not any task</h4>\r\n                )\r\n            }\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default TaskList;","import React, {useContext, useState, useEffect} from 'react';\r\nimport {TaskListContext} from \"../context/TaskListContext\";\r\n\r\nconst TaskForm = (props) => {\r\n    const {addTask, clearList, edit, editTask} = useContext(TaskListContext);\r\n    const [title, setTitle] = useState('')\r\n\r\n    const handleChange = (e) => {\r\n        setTitle(e.target.value)\r\n        console.log(title)\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        if (!edit) {\r\n            addTask(title)\r\n            setTitle('')\r\n        }else {\r\n            editTask(title, edit.id)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (edit){\r\n            setTitle(edit.title)\r\n        }else {\r\n            setTitle('')\r\n        }\r\n    }, [edit])\r\n\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className='form-group d-flex flex-column'>\r\n            <input\r\n                onChange={handleChange}\r\n                type=\"text\"\r\n                value={title}\r\n                className='form-control'\r\n                placeholder='Add to todo'\r\n                required\r\n            />\r\n            <div className='d-flex flex-row mt-3 mb-3'>\r\n                <button type='submit' className={edit ? 'btn btn-warning w-50' : 'btn btn-success w-50'}>\r\n                    {edit ? 'Edit' : 'Add Task'}\r\n                </button>\r\n                <button onClick={clearList} className='btn btn-outline-danger w-50'>\r\n                    Clear\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default TaskForm;","import React from 'react';\r\n\r\nconst Header = (props) => {\r\n    return (\r\n            <h1 className='text-center text-danger'>Task Manager</h1>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport TaskList from \"./components/TaskList\";\r\nimport TaskListContextProvider from \"./context/TaskListContext\";\r\nimport TaskForm from \"./components/taskForm\";\r\nimport Header from \"./components/Header\";\r\n\r\n\r\nconst App = () => {\r\n        return (\r\n            <TaskListContextProvider>\r\n                <div className='container text-white-50'>\r\n                    <div className=\"row mt-5\">\r\n                        <div style={{borderRadius: '5px'}} className=\"col-8 col-md-8 offset-2 col-lg-8 bg-dark p-5 shadow\">\r\n                            <Header />\r\n                            <TaskForm />\r\n                            <TaskList />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </TaskListContextProvider>\r\n        );\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}